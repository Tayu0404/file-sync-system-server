package model

import (
	"fmt"
)

type (
	User struct {
		// User Unique ID. Generated by snowflake.
		UserID     uint64    `json:"user_id,string" db:"user_id"`
		// Mail Address used to log in to the service.
		Email      string    `json:"email" db:"email"`
		// password stored with bcrypt salt hash.
		Password   string    `json:"password" db:"password"`
		// 2FA type set by User.
		// 0 : Password authentication only.
		// 1 : TOTP Authentication.
		TwoFAType  TwoFAType `json:"two_fa_type" db:"two_fa_type"`
		// The secret key is saved if 2FA for TOTP Authentication is enabled.
		TotpSecret string    `json:"totp_secret,omitempty" db:"totp_secret"`
		// User location settings.
		Locale     string    `json:"locale" db:"locale"`
		// User role settings.
		// Exists for booking and is not currently in use.
		Role	   int       `json:"role" db:"role"`
		// Date when the user was created.
		CreatedAt  string    `json:",omitempty", db:"created_at"`
		// Date the user last logged in.
		LastLogin  string    `json:",omitempty", db:"last_login"`
		// Date when the user was deleted.
		DeletedAt  string    `json:",omitempty", db:"deleted_at"`
		// Detailed profile of the user.
		Profile    Profile   `json:"user_profiles", db:"user_profiles"`
	}

	Profile struct {
		// User's displayed name
		Name      string     `json:"name" db:"name"`
		// User profile image
		Avatar    string     `json:"avatar" db:"avatar"`
	}
)

type TwoFAType int
const (
	TwoFATypeNotUsed TwoFAType = iota
	TwoFATypeTOTP
)

func (m *model) SignupUser(user *User) (err error) {
	tx, err := m.db.Begin()
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.Exec(`INSERT INTO users
						(user_id, email, password, two_fa_type, locale, role, created_at)
						VALUES (?, ?, ?, ?, ?, ?, NOW())`,
						user.UserID,
						user.Email,
						user.Password,
						user.TwoFAType,
						user.Locale,
						user.Role)
	if err != nil {
		return
	}

	_, err = tx.Exec(`INSERT INTO user_profiles
						(user_id, name, avatar, created_at)
						VALUES (?, ?, ?, NOW())`,
						user.UserID,
						user.Profile.Name,
						user.Profile.Avatar)
	if err != nil {
		return
	}
	return
}

func (m *model) LoginUser(user *User) (err error) {
	tx, err := m.db.Begin()
	if err != nil {
		fmt.Println(err)
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.Exec(`UPDATE users SET last_login = NOW() WHERE user_id = ?`, user.UserID)
	if err != nil {
		return
	}
	return
}

func (m *model) UpdateUserProfile(user *User) (err error) {
	tx, err := m.db.Begin()
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.Exec(`UPDATE user_profiles SET
						name = :name
						avatar = :avatar
						WHERE user_id = :user_id`,
						&user)
	if err != nil {
		return
	}
	return
}

func (m *model) UpdateUserPassword(user *User) (err error) {
	tx, err := m.db.Begin()
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.Exec(`UPDATE users SET
						password = :password
						WHERE user_id = :user_id`,
						&user)
	if err != nil {
		return
	}
	return
}

func (m *model) UpdateUserLocale(user *User) (err error) {
	tx, err := m.db.Begin()
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		err = tx.Commit()
	}()

	_, err = tx.Exec(`UPDATE users SET
						locale = :locale
						WHERE user_id = :user_id`,
						&user)
	if err != nil {
		return
	}
	return
}

func (m *model) GetUser(id uint64) (*User, error) {
	user := []*User{}
	err := m.db.Select(&user,`SELECT users.user_id,
									users.email,
									users.locale,
									users.role,
									users.created_at,
									users.last_login,
									user_profiles.name,
									user_profiles.avatar
									FROM users
									INNER JOIN user_profiles ON users.user_id = user_profiles.user_id
									WHERE users.user_id = ?`, id)
		
	if err != nil {
		return nil, err
	}
	return user[0], nil
}

func (m *model) GetDetailForUserLogin(email string) (*User, error) {
	user := []*User{}
	err := m.db.Select(&user,`SELECT users.user_id,
									users.email,
									users.password,
									users.two_fa_type,
									users.totp_secret,
									users.locale,
									user_profiles.name,
									user_profiles.avatar
									FROM users
									INNER JOIN user_profiles ON users.user_id = user_profiles.user_id
									AND users.email = ?`, email)
		
	if err != nil {
		return nil, err
	}
	return user[0], nil
}